create or replace function fact(x in pls_integer) return pls_integer as
num pls_integer := x;
temp pls_integer;
fact pls_integer :=1;
begin
temp := num;
while(num>0) loop
fact := fact * num;
num := num -1;
end loop;
return fact;
end;
/

declare
  a pls_integer := &a;
begin
  dbms_output.put_line('Factorial of '||to_char(a)||' = '||to_char(fact(a)));
  -- dbms_output.put_line(a);
end;
/

Enter value for a: 5
old   2:   a pls_integer := &a;
new   2:   a pls_integer := 5;
Factorial of 5 = 120

PL/SQL procedure successfully completed.
-------------------------------------------------------------------------------------
create or replace function  reverse(x in number) return number as
	temp number := x;
	rev number := 0;
	begin
		while(temp>0) loop
			rev := rev*10 + mod(temp,10);
			temp := floor(temp/10);
		end loop;
		-- dbms_output.put_line('reverse of '||x||' = '||rev);		
		return rev;
	end;
/
declare
	x number := &x;
	rev number;
begin
	rev := reverse(x);
	dbms_output.put_line('reverse of '||x||' = '||to_char(rev));	
	if(rev = x) then
		dbms_output.put_line('palindrome');
	else
		dbms_output.put_line('not palindrome');

	end if;
end;
/
	
Enter value for x: 123
old   2:        x number := &x;
new   2:        x number := 123;
reverse of 123 = 321
not palindrome

PL/SQL procedure successfully completed.

-----------------------------------------------------------------------------------------
create or replace function arm(x in number) return number as
	temp1 number := x;
	temp2 number := x;

	n number := 0;
	s number := 0;
	r number;
begin
	while (temp1>0) loop
		n := n+1;
		temp1 := floor(temp1/10);
	end loop;
	-- temp := x;
	while (temp2>0) loop
		r := mod(temp2,10);
		s := s+power(r,n);
		temp2 := floor(temp2/10);
	end loop;
	return s;
	end;
/

declare
	x number:= &x;
begin
 		-- dbms_output.put_line(arm(x));

 	if(x = arm(x)) then
 		dbms_output.put_line('armstrong');
	else
 		dbms_output.put_line('not armstrong');
	end if;
end;
/

Enter value for x: 153
old   2:        x number:= &x;
new   2:        x number:= 153;
armstrong

PL/SQL procedure successfully completed.

SQL> /
Enter value for x: 123
old   2:        x number:= &x;
new   2:        x number:= 123;
not armstrong

PL/SQL procedure successfully completed.

------------------------------------------------------------------------------------
SQL> create table  naturalsum(num int,sum int);

Table created.

create or replace function natsum(n in number) return number as
	s number := 0;
	begin
		s := n*(n+1)/2;
		return s;
end;
/

declare 
	a number := &a;
	begin
		insert into naturalsum values(a,natsum(a));
	end;
/
SQL> select * from naturalsum;

       NUM        SUM
---------- ----------
        10         55

---------------------------------------------------------------------------------------
create table  roots(num int,sqrt number,cube_root number);
	Table created.

create or replace function rt(m in number) return number as
	x number := m;
	begin
		insert into roots values(x,sqrt(x),power(x,1/3));
		return 1;
	end;
/
declare 
	x number := &x;
	res number;
begin	
	res := rt(x);
end;
/
PL/SQL procedure successfully completed.

SQL> select * from roots;

       NUM       SQRT  CUBE_ROOT
---------- ---------- ----------
         3 1.73205081 1.44224957
-------------------------------------------------------------------------